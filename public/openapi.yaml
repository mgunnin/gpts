openapi: 3.1.0
info:
  version: "0.1.0"
  title: "League of Legends GPT"
  description: "League of Legends GPT"
servers:
  - url: "https://{platform}.api.riotgames.com"
    variables:
      platform:
        enum:
          - americas
          - asia
          - esports
          - europe
          - br1
          - eun1
          - euw1
          - jp1
          - kr
          - la1
          - la2
          - na1
          - oc1
          - ph2
          - ru
          - sg2
          - th2
          - tr1
          - tw2
          - vn2
          - pbe1
          - sea
          - apac
          - ap
          - br
          - eu
          - latam
          - na
        default: americas
paths:
  "/riot/account/v1/accounts/by-puuid/{puuid}":
    get:
      tags:
        - account-v1
      summary: "Get account by puuid"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account-v1.AccountDto"
                x-type: AccountDto
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: account-v1.getByPuuid
      description: "Get account by puuid"
      parameters:
        - name: puuid
          in: path
          required: true
          schema:
            type: string
            x-type: string
      x-endpoint: account-v1
      x-platforms-available:
        - americas
        - asia
        - esports
        - europe
      x-route-enum: regional
    x-endpoint: account-v1
    x-platforms-available:
      - americas
      - asia
      - esports
      - europe
    x-route-enum: regional
  "/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}":
    get:
      tags:
        - account-v1
      summary: "Get account by riot id"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account-v1.AccountDto"
                x-type: AccountDto
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: account-v1.getByRiotId
      x-nullable-404: true
      description: "Get account by riot id"
      parameters:
        - name: tagLine
          in: path
          required: true
          schema:
            type: string
            x-type: string
          description: "When querying for a player by their riot id, the gameName and tagLine query params are required."
        - name: gameName
          in: path
          required: true
          schema:
            type: string
            x-type: string
          description: "When querying for a player by their riot id, the gameName and tagLine query params are required."
      x-endpoint: account-v1
      x-platforms-available:
        - americas
        - asia
        - esports
        - europe
      x-route-enum: regional
    x-endpoint: account-v1
    x-platforms-available:
      - americas
      - asia
      - esports
      - europe
    x-route-enum: regional
  /riot/account/v1/accounts/me:
    get:
      tags:
        - account-v1
      summary: "Get account by access token"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account-v1.AccountDto"
                x-type: AccountDto
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: account-v1.getByAccessToken
      description: "Get account by access token"
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            x-type: string
      x-endpoint: account-v1
      x-platforms-available:
        - americas
        - asia
        - esports
        - europe
      x-route-enum: regional
    x-endpoint: account-v1
    x-platforms-available:
      - americas
      - asia
      - esports
      - europe
    x-route-enum: regional
  "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}":
    get:
      tags:
        - champion-mastery-v4
      summary: "Get all champion mastery entries sorted by number of champion points descending."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteriesByPUUID"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/champion-mastery-v4.ChampionMasteryDto"
                  x-type: ChampionMasteryDto
                x-type: "List[ChampionMasteryDto]"
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: champion-mastery-v4.getAllChampionMasteriesByPUUID
      description: "Get all champion mastery entries sorted by number of champion points descending."
      parameters:
        - name: encryptedPUUID
          in: path
          required: true
          schema:
            type: string
            x-type: string
      x-endpoint: champion-mastery-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: champion-mastery-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/by-champion/{championId}":
    get:
      tags:
        - champion-mastery-v4
      summary: "Get a champion mastery by puuid and champion ID."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryByPUUID"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/champion-mastery-v4.ChampionMasteryDto"
                x-type: ChampionMasteryDto
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: champion-mastery-v4.getChampionMasteryByPUUID
      description: "Get a champion mastery by puuid and champion ID."
      parameters:
        - name: encryptedPUUID
          in: path
          required: true
          schema:
            type: string
            x-type: string
        - name: championId
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: champion
          description: "Champion ID to retrieve Champion Mastery."
      x-endpoint: champion-mastery-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: champion-mastery-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/top":
    get:
      tags:
        - champion-mastery-v4
      summary: "Get specified number of top champion mastery entries sorted by number of champion points descending."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getTopChampionMasteriesByPUUID"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/champion-mastery-v4.ChampionMasteryDto"
                  x-type: ChampionMasteryDto
                x-type: "List[ChampionMasteryDto]"
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: champion-mastery-v4.getTopChampionMasteriesByPUUID
      description: "Get specified number of top champion mastery entries sorted by number of champion points descending."
      parameters:
        - name: encryptedPUUID
          in: path
          required: true
          schema:
            type: string
            x-type: string
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int32
            x-type: int
          description: "Number of entries to retrieve, defaults to 3."
      x-endpoint: champion-mastery-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: champion-mastery-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/champion-mastery/v4/scores/by-puuid/{encryptedPUUID}":
    get:
      tags:
        - champion-mastery-v4
      summary: "Get a player's total champion mastery score, which is the sum of individual champion mastery levels."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScoreByPUUID"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
                x-type: int
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: champion-mastery-v4.getChampionMasteryScoreByPUUID
      description: "Get a player's total champion mastery score, which is the sum of individual champion mastery levels."
      parameters:
        - name: encryptedPUUID
          in: path
          required: true
          schema:
            type: string
            x-type: string
      x-endpoint: champion-mastery-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: champion-mastery-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  /lol/platform/v3/champion-rotations:
    get:
      tags:
        - champion-v3
      summary: "Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/champion-v3.ChampionInfo"
                x-type: ChampionInfo
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: champion-v3.getChampionInfo
      description: "Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)"
      x-endpoint: champion-v3
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: champion-v3
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/league-exp/v4/entries/{queue}/{tier}/{division}":
    get:
      tags:
        - league-exp-v4
      summary: "Get all the league entries."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/league-exp-v4.LeagueEntryDTO"
                  x-type: LeagueEntryDTO
                x-type: "Set[LeagueEntryDTO]"
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: league-exp-v4.getLeagueEntries
      description: "Get all the league entries."
      parameters:
        - name: queue
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: queueType
            enum:
              - RANKED_SOLO_5x5
              - RANKED_TFT
              - RANKED_FLEX_SR
              - RANKED_FLEX_TT
          description: "Note that the queue value must be a valid ranked queue."
        - name: tier
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: tier
            enum:
              - CHALLENGER
              - GRANDMASTER
              - MASTER
              - DIAMOND
              - EMERALD
              - PLATINUM
              - GOLD
              - SILVER
              - BRONZE
              - IRON
        - name: division
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: division
            enum:
              - I
              - II
              - III
              - IV
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            x-type: int
          description: "Defaults to 1. Starts with page 1."
      x-endpoint: league-exp-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: league-exp-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/league/v4/challengerleagues/by-queue/{queue}":
    get:
      tags:
        - league-v4
      summary: "Get the challenger league for given queue."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/league-v4.LeagueListDTO"
                x-type: LeagueListDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: league-v4.getChallengerLeague
      description: "Get the challenger league for given queue."
      parameters:
        - name: queue
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: queueType
            enum:
              - RANKED_SOLO_5x5
              - RANKED_FLEX_SR
              - RANKED_FLEX_TT
      x-endpoint: league-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: league-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/league/v4/entries/by-summoner/{encryptedSummonerId}":
    get:
      tags:
        - league-v4
      summary: "Get league entries in all queues for a given summoner ID."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/league-v4.LeagueEntryDTO"
                  x-type: LeagueEntryDTO
                x-type: "Set[LeagueEntryDTO]"
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: league-v4.getLeagueEntriesForSummoner
      description: "Get league entries in all queues for a given summoner ID."
      parameters:
        - name: encryptedSummonerId
          in: path
          required: true
          schema:
            type: string
            x-type: string
      x-endpoint: league-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: league-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/league/v4/entries/{queue}/{tier}/{division}":
    get:
      tags:
        - league-v4
      summary: "Get all the league entries."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/league-v4.LeagueEntryDTO"
                  x-type: LeagueEntryDTO
                x-type: "Set[LeagueEntryDTO]"
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: league-v4.getLeagueEntries
      description: "Get all the league entries."
      parameters:
        - name: division
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: division
            enum:
              - I
              - II
              - III
              - IV
        - name: tier
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: tier
            enum:
              - DIAMOND
              - EMERALD
              - PLATINUM
              - GOLD
              - SILVER
              - BRONZE
              - IRON
        - name: queue
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: queueType
            enum:
              - RANKED_SOLO_5x5
              - RANKED_FLEX_SR
              - RANKED_FLEX_TT
          description: "Note that the queue value must be a valid ranked queue."
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            x-type: int
          description: "Defaults to 1. Starts with page 1."
      x-endpoint: league-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: league-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/league/v4/grandmasterleagues/by-queue/{queue}":
    get:
      tags:
        - league-v4
      summary: "Get the grandmaster league of a specific queue."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/league-v4.LeagueListDTO"
                x-type: LeagueListDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: league-v4.getGrandmasterLeague
      description: "Get the grandmaster league of a specific queue."
      parameters:
        - name: queue
          in: path
          required: true
          schema:
            type: string
            x-type: string
            x-enum: queueType
            enum:
              - RANKED_SOLO_5x5
              - RANKED_FLEX_SR
              - RANKED_FLEX_TT
      x-endpoint: league-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: league-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/league/v4/leagues/{leagueId}":
    get:
      tags:
        - league-v4
      summary: "Get league with given ID, including inactive entries."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/league-v4.LeagueListDTO"
                x-type: LeagueListDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: league-v4.getLeagueById
      x-nullable-404: true
      description: "Get league with given ID, including inactive entries."
      parameters:
        - name: leagueId
          in: path
          required: true
          schema:
            type: string
            x-type: string
          description: "The UUID of the league."
      x-endpoint: league-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: league-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/league/v4/masterleagues/by-queue/{queue}":
    get:
      tags:
        - lol-challenges-v1
      summary: "Map of level to percentile of players who have achieved it"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengePercentiles"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                x-type: "Map[Level, Double]"
                type: object
                x-key:
                  type: string
                  x-type: string
                  x-enum: tier
                additionalProperties:
                  type: number
                  format: double
                  x-type: double
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: lol-challenges-v1.getChallengePercentiles
      x-nullable-404: true
      description: "Map of level to percentile of players who have achieved it"
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            x-type: long
      x-endpoint: lol-challenges-v1
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - pbe1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: lol-challenges-v1
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - pbe1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/match/v5/matches/by-puuid/{puuid}/ids":
    get:
      tags:
        - match-v5
      summary: "Get a list of match ids by puuid"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  x-type: string
                x-type: "List[string]"
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: match-v5.getMatchIdsByPUUID
      description: "Get a list of match ids by puuid"
      parameters:
        - name: puuid
          in: path
          required: true
          schema:
            type: string
            x-type: String
        - name: startTime
          in: query
          required: false
          schema:
            type: integer
            format: int64
            x-type: long
          description: "Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set."
        - name: endTime
          in: query
          required: false
          schema:
            type: integer
            format: int64
            x-type: long
          description: "Epoch timestamp in seconds."
        - name: queue
          in: query
          required: false
          schema:
            type: integer
            format: int32
            x-type: int
            x-enum: queue
          description: "Filter the list of match ids by a specific queue id. This filter is mutually inclusive of the type filter meaning any match ids returned must match both the queue and type filters."
        - name: type
          in: query
          required: false
          schema:
            type: string
            x-type: string
            enum:
              - ranked
              - normal
              - tourney
              - tutorial
          description: "Filter the list of match ids by the type of match. This filter is mutually inclusive of the queue filter meaning any match ids returned must match both the queue and type filters."
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            x-type: int
          description: "Defaults to 0. Start index."
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int32
            x-type: int
          description: "Defaults to 20. Valid values: 0 to 100. Number of match ids to return."
      x-endpoint: match-v5
      x-platforms-available:
        - americas
        - asia
        - europe
        - sea
      x-route-enum: regional
    x-endpoint: match-v5
    x-platforms-available:
      - americas
      - asia
      - europe
      - sea
    x-route-enum: regional
  "/lol/match/v5/matches/{matchId}":
    get:
      tags:
        - match-v5
      summary: "Get a match by match id"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match-v5.MatchDto"
                x-type: MatchDto
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: match-v5.getMatch
      x-nullable-404: true
      description: "Get a match by match id"
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: string
            x-type: String
      x-endpoint: match-v5
      x-platforms-available:
        - americas
        - asia
        - europe
        - sea
      x-route-enum: regional
    x-endpoint: match-v5
    x-platforms-available:
      - americas
      - asia
      - europe
      - sea
    x-route-enum: regional
  "/lol/match/v5/matches/{matchId}/timeline":
    get:
      tags:
        - match-v5
      summary: "Get a match timeline by match id"
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match-v5.MatchTimelineDto"
                x-type: MatchTimelineDto
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: match-v5.getTimeline
      x-nullable-404: true
      description: "Get a match timeline by match id"
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: string
            x-type: String
      x-endpoint: match-v5
      x-platforms-available:
        - americas
        - asia
        - europe
        - sea
      x-route-enum: regional
    x-endpoint: match-v5
    x-platforms-available:
      - americas
      - asia
      - europe
      - sea
    x-route-enum: regional
  "/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}":
    get:
      tags:
        - spectator-v4
      summary: "Get current game information for the given summoner ID."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/spectator-v4.CurrentGameInfo"
                x-type: CurrentGameInfo
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: spectator-v4.getCurrentGameInfoBySummoner
      x-nullable-404: true
      description: "Get current game information for the given summoner ID."
      parameters:
        - name: encryptedSummonerId
          in: path
          required: true
          schema:
            type: string
            x-type: string
          description: "The ID of the summoner."
      x-endpoint: spectator-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: spectator-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  /lol/spectator/v4/featured-games:
    get:
      tags:
        - spectator-v4
      summary: "Get list of featured games."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/spectator-v4.FeaturedGames"
                x-type: FeaturedGames
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: spectator-v4.getFeaturedGames
      description: "Get list of featured games."
      x-endpoint: spectator-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: spectator-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/summoner/v4/summoners/by-account/{encryptedAccountId}":
    get:
      tags:
        - summoner-v4
      summary: "Get a summoner by account ID."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/summoner-v4.SummonerDTO"
                x-type: SummonerDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: summoner-v4.getByAccountId
      description: "Get a summoner by account ID."
      parameters:
        - name: encryptedAccountId
          in: path
          required: true
          schema:
            type: string
            x-type: string
      x-endpoint: summoner-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: summoner-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/summoner/v4/summoners/by-name/{summonerName}":
    get:
      tags:
        - summoner-v4
      summary: "Get a summoner by summoner name."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/summoner-v4.SummonerDTO"
                x-type: SummonerDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: summoner-v4.getBySummonerName
      x-nullable-404: true
      description: "Get a summoner by summoner name."
      parameters:
        - name: summonerName
          in: path
          required: true
          schema:
            type: string
            x-type: string
          description: "Summoner Name"
      x-endpoint: summoner-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: summoner-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}":
    get:
      tags:
        - summoner-v4
      summary: "Get a summoner by PUUID."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/summoner-v4.SummonerDTO"
                x-type: SummonerDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: summoner-v4.getByPUUID
      description: "Get a summoner by PUUID."
      parameters:
        - name: encryptedPUUID
          in: path
          required: true
          schema:
            type: string
            x-type: string
          description: "Summoner ID"
      x-endpoint: summoner-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: summoner-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  /lol/summoner/v4/summoners/me:
    get:
      tags:
        - summoner-v4
      summary: "Get a summoner by access token."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccessToken"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/summoner-v4.SummonerDTO"
                x-type: SummonerDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: summoner-v4.getByAccessToken
      description: "Get a summoner by access token."
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
            x-type: string
          description: "Bearer token"
      x-endpoint: summoner-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: summoner-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
  "/lol/summoner/v4/summoners/{encryptedSummonerId}":
    get:
      tags:
        - summoner-v4
      summary: "Get a summoner by summoner ID."
      externalDocs:
        description: "Official API Reference"
        url: "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/summoner-v4.SummonerDTO"
                x-type: SummonerDTO
        "400":
          description: "Bad request"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "Data not found"
        "405":
          description: "Method not allowed"
        "415":
          description: "Unsupported media type"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
        "502":
          description: "Bad gateway"
        "503":
          description: "Service unavailable"
        "504":
          description: "Gateway timeout"
      operationId: summoner-v4.getBySummonerId
      description: "Get a summoner by summoner ID."
      parameters:
        - name: encryptedSummonerId
          in: path
          required: true
          schema:
            type: string
            x-type: string
          description: "Summoner ID"
      x-endpoint: summoner-v4
      x-platforms-available:
        - br1
        - eun1
        - euw1
        - jp1
        - kr
        - la1
        - la2
        - na1
        - oc1
        - ph2
        - ru
        - sg2
        - th2
        - tr1
        - tw2
        - vn2
      x-route-enum: platform
    x-endpoint: summoner-v4
    x-platforms-available:
      - br1
      - eun1
      - euw1
      - jp1
      - kr
      - la1
      - la2
      - na1
      - oc1
      - ph2
      - ru
      - sg2
      - th2
      - tr1
      - tw2
      - vn2
    x-route-enum: platform
components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: object
          properties:
            status_code:
              type: integer
            message:
              type: string
    account-v1.AccountDto:
      type: object
      title: AccountDto
      properties:
        puuid:
          type: string
          x-type: string
        gameName:
          type: string
          x-type: string
          description: "This field may be excluded from the response if the account doesn't have a gameName."
        tagLine:
          type: string
          x-type: string
          description: "This field may be excluded from the response if the account doesn't have a tagLine."
      required:
        - puuid
    account-v1.ActiveShardDto:
      type: object
      title: ActiveShardDto
      properties:
        puuid:
          type: string
          x-type: string
        game:
          type: string
          x-type: string
        activeShard:
          type: string
          x-type: string
      required:
        - puuid
        - game
        - activeShard
    champion-mastery-v4.ChampionMasteryDto:
      type: object
      title: ChampionMasteryDto
      properties:
        championPointsUntilNextLevel:
          type: integer
          format: int64
          x-type: long
          description: "Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion."
        chestGranted:
          type: boolean
          x-type: boolean
          description: "Is chest granted for this champion or not in current season."
        championId:
          type: integer
          format: int64
          x-type: long
          description: "Champion ID for this entry."
          x-enum: champion
        lastPlayTime:
          type: integer
          format: int64
          x-type: long
          description: "Last time this champion was played by this player - in Unix milliseconds time format."
        championLevel:
          type: integer
          format: int32
          x-type: int
          description: "Champion level for specified player and champion combination."
        summonerId:
          type: string
          x-type: string
          description: "Summoner ID for this entry. (Encrypted)"
        championPoints:
          type: integer
          format: int32
          x-type: int
          description: "Total number of champion points for this player and champion combination - they are used to determine championLevel."
        championPointsSinceLastLevel:
          type: integer
          format: int64
          x-type: long
          description: "Number of points earned since current level has been achieved."
        tokensEarned:
          type: integer
          format: int32
          x-type: int
          description: "The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0."
        puuid:
          type: string
          x-type: string
      description: "This object contains single Champion Mastery information for player and champion combination."
      required:
        - championPointsUntilNextLevel
        - chestGranted
        - championId
        - lastPlayTime
        - championLevel
        - summonerId
        - championPoints
        - championPointsSinceLastLevel
        - tokensEarned
    champion-v3.ChampionInfo:
      type: object
      title: ChampionInfo
      properties:
        maxNewPlayerLevel:
          type: integer
          format: int32
          x-type: int
        freeChampionIdsForNewPlayers:
          type: array
          items:
            type: integer
            format: int32
            x-type: int
            x-enum: champion
          x-type: "List[int]"
        freeChampionIds:
          type: array
          items:
            type: integer
            format: int32
            x-type: int
            x-enum: champion
          x-type: "List[int]"
      required:
        - maxNewPlayerLevel
        - freeChampionIdsForNewPlayers
        - freeChampionIds
    league-exp-v4.LeagueEntryDTO:
      type: object
      title: LeagueEntryDTO
      properties:
        leagueId:
          type: string
          x-type: string
        summonerId:
          type: string
          x-type: string
          description: "Player's summonerId (Encrypted)"
        summonerName:
          type: string
          x-type: string
        queueType:
          type: string
          x-type: string
          x-enum: queueType
        tier:
          type: string
          x-type: string
          x-enum: tier
        rank:
          type: string
          x-type: string
          description: "The player's division within a tier."
          x-enum: division
        leaguePoints:
          type: integer
          format: int32
          x-type: int
        wins:
          type: integer
          format: int32
          x-type: int
          description: "Winning team on Summoners Rift. First placement in Teamfight Tactics."
        losses:
          type: integer
          format: int32
          x-type: int
          description: "Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics."
        hotStreak:
          type: boolean
          x-type: boolean
        veteran:
          type: boolean
          x-type: boolean
        freshBlood:
          type: boolean
          x-type: boolean
        inactive:
          type: boolean
          x-type: boolean
        miniSeries:
          $ref: "#/components/schemas/league-exp-v4.MiniSeriesDTO"
          x-type: MiniSeriesDTO
      required:
        - leagueId
        - summonerId
        - summonerName
        - queueType
        - tier
        - rank
        - leaguePoints
        - wins
        - losses
        - hotStreak
        - veteran
        - freshBlood
        - inactive
    league-exp-v4.MiniSeriesDTO:
      type: object
      title: MiniSeriesDTO
      properties:
        losses:
          type: integer
          format: int32
          x-type: int
        progress:
          type: string
          x-type: string
        target:
          type: integer
          format: int32
          x-type: int
        wins:
          type: integer
          format: int32
          x-type: int
      required:
        - losses
        - progress
        - target
        - wins
    league-v4.LeagueListDTO:
      type: object
      title: LeagueListDTO
      properties:
        leagueId:
          type: string
          x-type: string
        entries:
          type: array
          items:
            $ref: "#/components/schemas/league-v4.LeagueItemDTO"
            x-type: LeagueItemDTO
          x-type: "List[LeagueItemDTO]"
        tier:
          type: string
          x-type: string
          x-enum: tier
        name:
          type: string
          x-type: string
        queue:
          type: string
          x-type: string
          x-enum: queueType
      required:
        - entries
        - tier
    league-v4.LeagueItemDTO:
      type: object
      title: LeagueItemDTO
      properties:
        freshBlood:
          type: boolean
          x-type: boolean
        wins:
          type: integer
          format: int32
          x-type: int
          description: "Winning team on Summoners Rift."
        summonerName:
          type: string
          x-type: string
        miniSeries:
          $ref: "#/components/schemas/league-v4.MiniSeriesDTO"
          x-type: MiniSeriesDTO
        inactive:
          type: boolean
          x-type: boolean
        veteran:
          type: boolean
          x-type: boolean
        hotStreak:
          type: boolean
          x-type: boolean
        rank:
          type: string
          x-type: string
          x-enum: division
        leaguePoints:
          type: integer
          format: int32
          x-type: int
        losses:
          type: integer
          format: int32
          x-type: int
          description: "Losing team on Summoners Rift."
        summonerId:
          type: string
          x-type: string
          description: "Player's encrypted summonerId."
      required:
        - freshBlood
        - wins
        - summonerName
        - inactive
        - veteran
        - hotStreak
        - rank
        - leaguePoints
        - losses
        - summonerId
    league-v4.MiniSeriesDTO:
      type: object
      title: MiniSeriesDTO
      properties:
        losses:
          type: integer
          format: int32
          x-type: int
        progress:
          type: string
          x-type: string
        target:
          type: integer
          format: int32
          x-type: int
        wins:
          type: integer
          format: int32
          x-type: int
      required:
        - losses
        - progress
        - target
        - wins
    league-v4.LeagueEntryDTO:
      type: object
      title: LeagueEntryDTO
      properties:
        leagueId:
          type: string
          x-type: string
        summonerId:
          type: string
          x-type: string
          description: "Player's encrypted summonerId."
        summonerName:
          type: string
          x-type: string
        queueType:
          type: string
          x-type: string
          x-enum: queueType
        tier:
          type: string
          x-type: string
          x-enum: tier
        rank:
          type: string
          x-type: string
          description: "The player's division within a tier."
          x-enum: division
        leaguePoints:
          type: integer
          format: int32
          x-type: int
        wins:
          type: integer
          format: int32
          x-type: int
          description: "Winning team on Summoners Rift."
        losses:
          type: integer
          format: int32
          x-type: int
          description: "Losing team on Summoners Rift."
        hotStreak:
          type: boolean
          x-type: boolean
        veteran:
          type: boolean
          x-type: boolean
        freshBlood:
          type: boolean
          x-type: boolean
        inactive:
          type: boolean
          x-type: boolean
        miniSeries:
          $ref: "#/components/schemas/league-v4.MiniSeriesDTO"
          x-type: MiniSeriesDTO
      required:
        - summonerId
        - summonerName
        - queueType
        - leaguePoints
        - wins
        - losses
        - hotStreak
        - veteran
        - freshBlood
        - inactive

        - id
        - author
        - publish
        - publish_locations
        - translations
        - created_at
        - updated_at
    match-v5.MatchDto:
      type: object
      title: MatchDto
      properties:
        metadata:
          $ref: "#/components/schemas/match-v5.MetadataDto"
          x-type: MetadataDto
          description: "Match metadata."
        info:
          $ref: "#/components/schemas/match-v5.InfoDto"
          x-type: InfoDto
          description: "Match info."
      required:
        - metadata
        - info
    match-v5.MetadataDto:
      type: object
      title: MetadataDto
      properties:
        dataVersion:
          type: string
          x-type: string
          description: "Match data version."
        matchId:
          type: string
          x-type: string
          description: "Match id."
        participants:
          type: array
          items:
            type: string
            x-type: string
          x-type: "List[string]"
          description: "A list of participant PUUIDs."
      required:
        - dataVersion
        - matchId
        - participants
    match-v5.InfoDto:
      type: object
      title: InfoDto
      properties:
        gameCreation:
          type: integer
          format: int64
          x-type: long
          description: "Unix timestamp for when the game is created on the game server (i.e., the loading screen)."
        gameDuration:
          type: integer
          format: int64
          x-type: long
          description: "Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response."
        gameEndTimestamp:
          type: integer
          format: int64
          x-type: long
          description: 'Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.'
        gameId:
          type: integer
          format: int64
          x-type: long
        gameMode:
          type: string
          x-type: string
          description: "Refer to the Game Constants documentation."
          x-enum: gameMode
        gameName:
          type: string
          x-type: string
        gameStartTimestamp:
          type: integer
          format: int64
          x-type: long
          description: "Unix timestamp for when match starts on the game server."
        gameType:
          type: string
          x-type: string
          x-enum: gameType
        gameVersion:
          type: string
          x-type: string
          description: "The first two parts can be used to determine the patch a game was played on."
        mapId:
          type: integer
          format: int32
          x-type: int
          description: "Refer to the Game Constants documentation."
          x-enum: map
        participants:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.ParticipantDto"
            x-type: ParticipantDto
          x-type: "List[ParticipantDto]"
        platformId:
          type: string
          x-type: string
          description: "Platform where the match was played."
        queueId:
          type: integer
          format: int32
          x-type: int
          description: "Refer to the Game Constants documentation."
          x-enum: queue
        teams:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.TeamDto"
            x-type: TeamDto
          x-type: "List[TeamDto]"
        tournamentCode:
          type: string
          x-type: string
          description: "Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021."
      required:
        - gameCreation
        - gameDuration
        - gameId
        - gameMode
        - gameName
        - gameStartTimestamp
        - gameType
        - gameVersion
        - mapId
        - participants
        - platformId
        - queueId
        - teams
    match-v5.ParticipantDto:
      type: object
      title: ParticipantDto
      properties:
        assists:
          type: integer
          format: int32
          x-type: int
        baronKills:
          type: integer
          format: int32
          x-type: int
        bountyLevel:
          type: integer
          format: int32
          x-type: int
        champExperience:
          type: integer
          format: int32
          x-type: int
        champLevel:
          type: integer
          format: int32
          x-type: int
        championId:
          type: integer
          format: int32
          x-type: int
          description: "Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4."
          x-enum: champion
        championName:
          type: string
          x-type: string
        championTransform:
          type: integer
          format: int32
          x-type: int
          description: "This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin)"
        consumablesPurchased:
          type: integer
          format: int32
          x-type: int
        damageDealtToBuildings:
          type: integer
          format: int32
          x-type: int
        damageDealtToObjectives:
          type: integer
          format: int32
          x-type: int
        damageDealtToTurrets:
          type: integer
          format: int32
          x-type: int
        damageSelfMitigated:
          type: integer
          format: int32
          x-type: int
        deaths:
          type: integer
          format: int32
          x-type: int
        detectorWardsPlaced:
          type: integer
          format: int32
          x-type: int
        doubleKills:
          type: integer
          format: int32
          x-type: int
        dragonKills:
          type: integer
          format: int32
          x-type: int
        firstBloodAssist:
          type: boolean
          x-type: boolean
        firstBloodKill:
          type: boolean
          x-type: boolean
        firstTowerAssist:
          type: boolean
          x-type: boolean
        firstTowerKill:
          type: boolean
          x-type: boolean
        gameEndedInEarlySurrender:
          type: boolean
          x-type: boolean
        gameEndedInSurrender:
          type: boolean
          x-type: boolean
        goldEarned:
          type: integer
          format: int32
          x-type: int
        goldSpent:
          type: integer
          format: int32
          x-type: int
        individualPosition:
          type: string
          x-type: string
          description: "Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field."
        inhibitorKills:
          type: integer
          format: int32
          x-type: int
        inhibitorTakedowns:
          type: integer
          format: int32
          x-type: int
        inhibitorsLost:
          type: integer
          format: int32
          x-type: int
        item0:
          type: integer
          format: int32
          x-type: int
        item1:
          type: integer
          format: int32
          x-type: int
        item2:
          type: integer
          format: int32
          x-type: int
        item3:
          type: integer
          format: int32
          x-type: int
        item4:
          type: integer
          format: int32
          x-type: int
        item5:
          type: integer
          format: int32
          x-type: int
        item6:
          type: integer
          format: int32
          x-type: int
        itemsPurchased:
          type: integer
          format: int32
          x-type: int
        killingSprees:
          type: integer
          format: int32
          x-type: int
        kills:
          type: integer
          format: int32
          x-type: int
        lane:
          type: string
          x-type: string
        largestCriticalStrike:
          type: integer
          format: int32
          x-type: int
        largestKillingSpree:
          type: integer
          format: int32
          x-type: int
        largestMultiKill:
          type: integer
          format: int32
          x-type: int
        longestTimeSpentLiving:
          type: integer
          format: int32
          x-type: int
        magicDamageDealt:
          type: integer
          format: int32
          x-type: int
        magicDamageDealtToChampions:
          type: integer
          format: int32
          x-type: int
        magicDamageTaken:
          type: integer
          format: int32
          x-type: int
        neutralMinionsKilled:
          type: integer
          format: int32
          x-type: int
        nexusKills:
          type: integer
          format: int32
          x-type: int
        nexusTakedowns:
          type: integer
          format: int32
          x-type: int
        nexusLost:
          type: integer
          format: int32
          x-type: int
        objectivesStolen:
          type: integer
          format: int32
          x-type: int
        objectivesStolenAssists:
          type: integer
          format: int32
          x-type: int
        participantId:
          type: integer
          format: int32
          x-type: int
        pentaKills:
          type: integer
          format: int32
          x-type: int
        perks:
          $ref: "#/components/schemas/match-v5.PerksDto"
          x-type: PerksDto
        physicalDamageDealt:
          type: integer
          format: int32
          x-type: int
        physicalDamageDealtToChampions:
          type: integer
          format: int32
          x-type: int
        physicalDamageTaken:
          type: integer
          format: int32
          x-type: int
        profileIcon:
          type: integer
          format: int32
          x-type: int
        puuid:
          type: string
          x-type: string
        quadraKills:
          type: integer
          format: int32
          x-type: int
        riotIdName:
          type: string
          x-type: string
        riotIdGameName:
          type: string
          x-type: string
        riotIdTagline:
          type: string
          x-type: string
        role:
          type: string
          x-type: string
        sightWardsBoughtInGame:
          type: integer
          format: int32
          x-type: int
        spell1Casts:
          type: integer
          format: int32
          x-type: int
        spell2Casts:
          type: integer
          format: int32
          x-type: int
        spell3Casts:
          type: integer
          format: int32
          x-type: int
        spell4Casts:
          type: integer
          format: int32
          x-type: int
        summoner1Casts:
          type: integer
          format: int32
          x-type: int
        summoner1Id:
          type: integer
          format: int32
          x-type: int
        summoner2Casts:
          type: integer
          format: int32
          x-type: int
        summoner2Id:
          type: integer
          format: int32
          x-type: int
        summonerId:
          type: string
          x-type: string
        summonerLevel:
          type: integer
          format: int32
          x-type: int
        summonerName:
          type: string
          x-type: string
        teamEarlySurrendered:
          type: boolean
          x-type: boolean
        teamId:
          type: integer
          format: int32
          x-type: int
          x-enum: team
        teamPosition:
          type: string
          x-type: string
          description: "Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field."
        timeCCingOthers:
          type: integer
          format: int32
          x-type: int
        timePlayed:
          type: integer
          format: int32
          x-type: int
        totalDamageDealt:
          type: integer
          format: int32
          x-type: int
        totalDamageDealtToChampions:
          type: integer
          format: int32
          x-type: int
        totalDamageShieldedOnTeammates:
          type: integer
          format: int32
          x-type: int
        totalDamageTaken:
          type: integer
          format: int32
          x-type: int
        totalHeal:
          type: integer
          format: int32
          x-type: int
        totalHealsOnTeammates:
          type: integer
          format: int32
          x-type: int
        totalMinionsKilled:
          type: integer
          format: int32
          x-type: int
        totalTimeCCDealt:
          type: integer
          format: int32
          x-type: int
        totalTimeSpentDead:
          type: integer
          format: int32
          x-type: int
        totalUnitsHealed:
          type: integer
          format: int32
          x-type: int
        tripleKills:
          type: integer
          format: int32
          x-type: int
        trueDamageDealt:
          type: integer
          format: int32
          x-type: int
        trueDamageDealtToChampions:
          type: integer
          format: int32
          x-type: int
        trueDamageTaken:
          type: integer
          format: int32
          x-type: int
        turretKills:
          type: integer
          format: int32
          x-type: int
        turretTakedowns:
          type: integer
          format: int32
          x-type: int
        turretsLost:
          type: integer
          format: int32
          x-type: int
        unrealKills:
          type: integer
          format: int32
          x-type: int
        visionScore:
          type: integer
          format: int32
          x-type: int
        visionWardsBoughtInGame:
          type: integer
          format: int32
          x-type: int
        wardsKilled:
          type: integer
          format: int32
          x-type: int
        wardsPlaced:
          type: integer
          format: int32
          x-type: int
        win:
          type: boolean
          x-type: boolean
        allInPings:
          type: integer
          format: int32
          x-type: int
        assistMePings:
          type: integer
          format: int32
          x-type: int
        baitPings:
          type: integer
          format: int32
          x-type: int
        basicPings:
          type: integer
          format: int32
          x-type: int
        commandPings:
          type: integer
          format: int32
          x-type: int
        dangerPings:
          type: integer
          format: int32
          x-type: int
        enemyMissingPings:
          type: integer
          format: int32
          x-type: int
        enemyVisionPings:
          type: integer
          format: int32
          x-type: int
        getBackPings:
          type: integer
          format: int32
          x-type: int
        holdPings:
          type: integer
          format: int32
          x-type: int
        needVisionPings:
          type: integer
          format: int32
          x-type: int
        onMyWayPings:
          type: integer
          format: int32
          x-type: int
        pushPings:
          type: integer
          format: int32
          x-type: int
        visionClearedPings:
          type: integer
          format: int32
          x-type: int
        eligibleForProgression:
          type: boolean
          x-type: boolean
        challenges:
          $ref: "#/components/schemas/match-v5.ParticipantChallenges"
          x-type: ParticipantChallenges
        totalAllyJungleMinionsKilled:
          type: integer
          format: int32
          x-type: int
        totalEnemyJungleMinionsKilled:
          type: integer
          format: int32
          x-type: int
        playerAugment1:
          type: integer
          format: int32
          x-type: int
        playerAugment2:
          type: integer
          format: int32
          x-type: int
        playerAugment3:
          type: integer
          format: int32
          x-type: int
        playerAugment4:
          type: integer
          format: int32
          x-type: int
        playerSubteamId:
          type: integer
          format: int32
          x-type: int
        subteamPlacement:
          type: integer
          format: int32
          x-type: int
        placement:
          type: integer
          format: int32
          x-type: int
        missions:
          $ref: "#/components/schemas/match-v5.ParticipantMissions"
          x-type: ParticipantMissions
        playerScore0:
          type: integer
          format: int32
          x-type: int
        playerScore1:
          type: integer
          format: int32
          x-type: int
        playerScore10:
          type: integer
          format: int32
          x-type: int
        playerScore11:
          type: integer
          format: int32
          x-type: int
        playerScore2:
          type: integer
          format: int32
          x-type: int
        playerScore3:
          type: integer
          format: int32
          x-type: int
        playerScore4:
          type: integer
          format: int32
          x-type: int
        playerScore5:
          type: integer
          format: int32
          x-type: int
        playerScore6:
          type: integer
          format: int32
          x-type: int
        playerScore7:
          type: integer
          format: int32
          x-type: int
        playerScore8:
          type: integer
          format: int32
          x-type: int
        playerScore9:
          type: integer
          format: int32
          x-type: int
      required:
        - assists
        - baronKills
        - bountyLevel
        - champExperience
        - champLevel
        - championId
        - championName
        - championTransform
        - consumablesPurchased
        - damageDealtToObjectives
        - damageDealtToTurrets
        - damageSelfMitigated
        - deaths
        - detectorWardsPlaced
        - doubleKills
        - dragonKills
        - firstBloodAssist
        - firstBloodKill
        - firstTowerAssist
        - firstTowerKill
        - gameEndedInEarlySurrender
        - gameEndedInSurrender
        - goldEarned
        - goldSpent
        - individualPosition
        - inhibitorKills
        - item0
        - item1
        - item2
        - item3
        - item4
        - item5
        - item6
        - itemsPurchased
        - killingSprees
        - kills
        - lane
        - largestCriticalStrike
        - largestKillingSpree
        - largestMultiKill
        - longestTimeSpentLiving
        - magicDamageDealt
        - magicDamageDealtToChampions
        - magicDamageTaken
        - neutralMinionsKilled
        - nexusKills
        - objectivesStolen
        - objectivesStolenAssists
        - participantId
        - pentaKills
        - perks
        - physicalDamageDealt
        - physicalDamageDealtToChampions
        - physicalDamageTaken
        - profileIcon
        - puuid
        - quadraKills
        - riotIdTagline
        - role
        - sightWardsBoughtInGame
        - spell1Casts
        - spell2Casts
        - spell3Casts
        - spell4Casts
        - summoner1Casts
        - summoner1Id
        - summoner2Casts
        - summoner2Id
        - summonerId
        - summonerLevel
        - summonerName
        - teamEarlySurrendered
        - teamId
        - teamPosition
        - timeCCingOthers
        - timePlayed
        - totalDamageDealt
        - totalDamageDealtToChampions
        - totalDamageShieldedOnTeammates
        - totalDamageTaken
        - totalHeal
        - totalHealsOnTeammates
        - totalMinionsKilled
        - totalTimeCCDealt
        - totalTimeSpentDead
        - totalUnitsHealed
        - tripleKills
        - trueDamageDealt
        - trueDamageDealtToChampions
        - trueDamageTaken
        - turretKills
        - unrealKills
        - visionScore
        - visionWardsBoughtInGame
        - wardsKilled
        - wardsPlaced
        - win
    match-v5.PerksDto:
      type: object
      title: PerksDto
      properties:
        statPerks:
          $ref: "#/components/schemas/match-v5.PerkStatsDto"
          x-type: PerkStatsDto
        styles:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.PerkStyleDto"
            x-type: PerkStyleDto
          x-type: "List[PerkStyleDto]"
      required:
        - statPerks
        - styles
    match-v5.PerkStatsDto:
      type: object
      title: PerkStatsDto
      properties:
        defense:
          type: integer
          format: int32
          x-type: int
        flex:
          type: integer
          format: int32
          x-type: int
        offense:
          type: integer
          format: int32
          x-type: int
      required:
        - defense
        - flex
        - offense
    match-v5.PerkStyleDto:
      type: object
      title: PerkStyleDto
      properties:
        description:
          type: string
          x-type: string
        selections:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.PerkStyleSelectionDto"
            x-type: PerkStyleSelectionDto
          x-type: "List[PerkStyleSelectionDto]"
        style:
          type: integer
          format: int32
          x-type: int
      required:
        - description
        - selections
        - style
    match-v5.PerkStyleSelectionDto:
      type: object
      title: PerkStyleSelectionDto
      properties:
        perk:
          type: integer
          format: int32
          x-type: int
        var1:
          type: integer
          format: int32
          x-type: int
        var2:
          type: integer
          format: int32
          x-type: int
        var3:
          type: integer
          format: int32
          x-type: int
      required:
        - perk
        - var1
        - var2
        - var3
    match-v5.TeamDto:
      type: object
      title: TeamDto
      properties:
        bans:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.BanDto"
            x-type: BanDto
          x-type: "List[BanDto]"
        objectives:
          $ref: "#/components/schemas/match-v5.ObjectivesDto"
          x-type: ObjectivesDto
        teamId:
          type: integer
          format: int32
          x-type: int
          x-enum: team
        win:
          type: boolean
          x-type: boolean
      required:
        - bans
        - objectives
        - teamId
        - win
    match-v5.BanDto:
      type: object
      title: BanDto
      properties:
        championId:
          type: integer
          format: int32
          x-type: int
          x-enum: champion
        pickTurn:
          type: integer
          format: int32
          x-type: int
      required:
        - championId
        - pickTurn
    match-v5.ObjectivesDto:
      type: object
      title: ObjectivesDto
      properties:
        baron:
          $ref: "#/components/schemas/match-v5.ObjectiveDto"
          x-type: ObjectiveDto
        champion:
          $ref: "#/components/schemas/match-v5.ObjectiveDto"
          x-type: ObjectiveDto
        dragon:
          $ref: "#/components/schemas/match-v5.ObjectiveDto"
          x-type: ObjectiveDto
        inhibitor:
          $ref: "#/components/schemas/match-v5.ObjectiveDto"
          x-type: ObjectiveDto
        riftHerald:
          $ref: "#/components/schemas/match-v5.ObjectiveDto"
          x-type: ObjectiveDto
        tower:
          $ref: "#/components/schemas/match-v5.ObjectiveDto"
          x-type: ObjectiveDto
        horde:
          $ref: "#/components/schemas/match-v5.ObjectiveDto"
          x-type: ObjectiveDto
      required:
        - baron
        - champion
        - dragon
        - inhibitor
        - riftHerald
        - tower
    match-v5.ObjectiveDto:
      type: object
      title: ObjectiveDto
      properties:
        first:
          type: boolean
          x-type: boolean
        kills:
          type: integer
          format: int32
          x-type: int
      required:
        - first
        - kills
    match-v5.MatchTimelineDto:
      title: MatchTimelineDto
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/match-v5.MetadataDto"
        info:
          $ref: "#/components/schemas/match-v5.MatchTimelineInfo"
      required:
        - metadata
        - info
        - bot
        - spell2Id
        - profileIconId
        - summonerName
        - championId
        - teamId
        - spell1Id
    summoner-v4.SummonerDTO:
      title: SummonerDTO
      type: object
      description: "represents a summoner"
      properties:
        accountId:
          type: string
          x-type: string
          description: "Encrypted account ID. Max length 56 characters."
        profileIconId:
          type: integer
          format: int32
          x-type: int
          description: "ID of the summoner icon associated with the summoner."
        revisionDate:
          type: integer
          format: int64
          x-type: long
          description: "Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change"
        name:
          type: string
          x-type: string
          description: "Summoner name."
        id:
          type: string
          x-type: string
          description: "Encrypted summoner ID. Max length 63 characters."
        puuid:
          type: string
          x-type: string
          description: "Encrypted PUUID. Exact length of 78 characters."
        summonerLevel:
          type: integer
          format: int64
          x-type: long
          description: "Summoner level associated with the summoner."
      required:
        - accountId
        - profileIconId
        - revisionDate
        - name
        - id
        - puuid
        - summonerLevel
        - providerId
    match-v5.ParticipantChallenges:
      type: object
      title: ParticipantChallenges
      properties:
        12AssistStreakCount:
          type: number
          format: double
          x-type: double
        abilityUses:
          type: number
          format: double
          x-type: double
        acesBefore15Minutes:
          type: number
          format: double
          x-type: double
        alliedJungleMonsterKills:
          type: number
          format: double
          x-type: double
        baronBuffGoldAdvantageOverThreshold:
          type: number
          format: double
          x-type: double
        baronTakedowns:
          type: number
          format: double
          x-type: double
        blastConeOppositeOpponentCount:
          type: number
          format: double
          x-type: double
        bountyGold:
          type: number
          format: double
          x-type: double
        buffsStolen:
          type: number
          format: double
          x-type: double
        completeSupportQuestInTime:
          type: number
          format: double
          x-type: double
        controlWardsPlaced:
          type: number
          format: double
          x-type: double
        controlWardTimeCoverageInRiverOrEnemyHalf:
          type: number
          format: double
          x-type: double
        damagePerMinute:
          type: number
          format: double
          x-type: double
        damageTakenOnTeamPercentage:
          type: number
          format: double
          x-type: double
        dancedWithRiftHerald:
          type: number
          format: double
          x-type: double
        deathsByEnemyChamps:
          type: number
          format: double
          x-type: double
        dodgeSkillShotsSmallWindow:
          type: number
          format: double
          x-type: double
        doubleAces:
          type: number
          format: double
          x-type: double
        dragonTakedowns:
          type: number
          format: double
          x-type: double
        earliestBaron:
          type: number
          format: double
          x-type: double
        earliestDragonTakedown:
          type: number
          format: double
          x-type: double
        earliestElderDragon:
          type: number
          format: double
          x-type: double
        earlyLaningPhaseGoldExpAdvantage:
          type: number
          format: double
          x-type: double
        effectiveHealAndShielding:
          type: number
          format: double
          x-type: double
        elderDragonKillsWithOpposingSoul:
          type: number
          format: double
          x-type: double
        elderDragonMultikills:
          type: number
          format: double
          x-type: double
        enemyChampionImmobilizations:
          type: number
          format: double
          x-type: double
        enemyJungleMonsterKills:
          type: number
          format: double
          x-type: double
        epicMonsterKillsNearEnemyJungler:
          type: number
          format: double
          x-type: double
        epicMonsterKillsWithin30SecondsOfSpawn:
          type: number
          format: double
          x-type: double
        epicMonsterSteals:
          type: number
          format: double
          x-type: double
        epicMonsterStolenWithoutSmite:
          type: number
          format: double
          x-type: double
        fasterSupportQuestCompletion:
          type: number
          format: double
          x-type: double
        fastestLegendary:
          type: number
          format: double
          x-type: double
        firstTurretKilled:
          type: number
          format: double
          x-type: double
        firstTurretKilledTime:
          type: number
          format: double
          x-type: double
        flawlessAces:
          type: number
          format: double
          x-type: double
        fullTeamTakedown:
          type: number
          format: double
          x-type: double
        gameLength:
          type: number
          format: double
          x-type: double
        getTakedownsInAllLanesEarlyJungleAsLaner:
          type: number
          format: double
          x-type: double
        goldPerMinute:
          type: number
          format: double
          x-type: double
        hadAfkTeammate:
          type: number
          format: double
          x-type: double
        hadOpenNexus:
          type: number
          format: double
          x-type: double
        highestChampionDamage:
          type: number
          format: double
          x-type: double
        highestCrowdControlScore:
          type: number
          format: double
          x-type: double
        highestWardKills:
          type: number
          format: double
          x-type: double
        immobilizeAndKillWithAlly:
          type: number
          format: double
          x-type: double
        initialBuffCount:
          type: number
          format: double
          x-type: double
        initialCrabCount:
          type: number
          format: double
          x-type: double
        jungleCsBefore10Minutes:
          type: number
          format: double
          x-type: double
        junglerKillsEarlyJungle:
          type: number
          format: double
          x-type: double
        junglerTakedownsNearDamagedEpicMonster:
          type: number
          format: double
          x-type: double
        kda:
          type: number
          format: double
          x-type: double
        killAfterHiddenWithAlly:
          type: number
          format: double
          x-type: double
        killedChampTookFullTeamDamageSurvived:
          type: number
          format: double
          x-type: double
        killingSprees:
          type: number
          format: double
          x-type: double
        killParticipation:
          type: number
          format: double
          x-type: double
        killsNearEnemyTurret:
          type: number
          format: double
          x-type: double
        killsOnLanersEarlyJungleAsJungler:
          type: number
          format: double
          x-type: double
        killsOnOtherLanesEarlyJungleAsLaner:
          type: number
          format: double
          x-type: double
        killsOnRecentlyHealedByAramPack:
          type: number
          format: double
          x-type: double
        killsUnderOwnTurret:
          type: number
          format: double
          x-type: double
        killsWithHelpFromEpicMonster:
          type: number
          format: double
          x-type: double
        knockEnemyIntoTeamAndKill:
          type: number
          format: double
          x-type: double
        kTurretsDestroyedBeforePlatesFall:
          type: number
          format: double
          x-type: double
        landSkillShotsEarlyGame:
          type: number
          format: double
          x-type: double
        laneMinionsFirst10Minutes:
          type: number
          format: double
          x-type: double
        laningPhaseGoldExpAdvantage:
          type: number
          format: double
          x-type: double
        legendaryCount:
          type: number
          format: double
          x-type: double
        lostAnInhibitor:
          type: number
          format: double
          x-type: double
        maxCsAdvantageOnLaneOpponent:
          type: number
          format: double
          x-type: double
        maxKillDeficit:
          type: number
          format: double
          x-type: double
        maxLevelLeadLaneOpponent:
          type: number
          format: double
          x-type: double
        mejaisFullStackInTime:
          type: number
          format: double
          x-type: double
        moreEnemyJungleThanOpponent:
          type: number
          format: double
          x-type: double
        mostWardsDestroyedOneSweeper:
          type: number
          format: double
          x-type: double
        multiKillOneSpell:
          type: number
          format: double
          x-type: double
        multikills:
          type: number
          format: double
          x-type: double
        multikillsAfterAggressiveFlash:
          type: number
          format: double
          x-type: double
        multiTurretRiftHeraldCount:
          type: number
          format: double
          x-type: double
        mythicItemUsed:
          type: number
          format: double
          x-type: double
        outerTurretExecutesBefore10Minutes:
          type: number
          format: double
          x-type: double
        outnumberedKills:
          type: number
          format: double
          x-type: double
        outnumberedNexusKill:
          type: number
          format: double
          x-type: double
        perfectDragonSoulsTaken:
          type: number
          format: double
          x-type: double
        perfectGame:
          type: number
          format: double
          x-type: double
        pickKillWithAlly:
          type: number
          format: double
          x-type: double
        playedChampSelectPosition:
          type: number
          format: double
          x-type: double
        poroExplosions:
          type: number
          format: double
          x-type: double
        quickCleanse:
          type: number
          format: double
          x-type: double
        quickFirstTurret:
          type: number
          format: double
          x-type: double
        quickSoloKills:
          type: number
          format: double
          x-type: double
        riftHeraldTakedowns:
          type: number
          format: double
          x-type: double
        saveAllyFromDeath:
          type: number
          format: double
          x-type: double
        scuttleCrabKills:
          type: number
          format: double
          x-type: double
        shortestTimeToAceFromFirstTakedown:
          type: number
          format: double
          x-type: double
        skillshotsDodged:
          type: number
          format: double
          x-type: double
        skillshotsHit:
          type: number
          format: double
          x-type: double
        snowballsHit:
          type: number
          format: double
          x-type: double
        soloBaronKills:
          type: number
          format: double
          x-type: double
        soloKills:
          type: number
          format: double
          x-type: double
        soloTurretsLategame:
          type: number
          format: double
          x-type: double
        stealthWardsPlaced:
          type: number
          format: double
          x-type: double
        survivedSingleDigitHpCount:
          type: number
          format: double
          x-type: double
        survivedThreeImmobilizesInFight:
          type: number
          format: double
          x-type: double
        takedownOnFirstTurret:
          type: number
          format: double
          x-type: double
        takedowns:
          type: number
          format: double
          x-type: double
        takedownsAfterGainingLevelAdvantage:
          type: number
          format: double
          x-type: double
        takedownsBeforeJungleMinionSpawn:
          type: number
          format: double
          x-type: double
        takedownsFirst25Minutes:
          type: number
          format: double
          x-type: double
        takedownsFirstXMinutes:
          type: number
          format: double
          x-type: double
        takedownsInAlcove:
          type: number
          format: double
          x-type: double
        takedownsInEnemyFountain:
          type: number
          format: double
          x-type: double
        teamBaronKills:
          type: number
          format: double
          x-type: double
        teamDamagePercentage:
          type: number
          format: double
          x-type: double
        teamElderDragonKills:
          type: number
          format: double
          x-type: double
        teamRiftHeraldKills:
          type: number
          format: double
          x-type: double
        teleportTakedowns:
          type: number
          format: double
          x-type: double
        thirdInhibitorDestroyedTime:
          type: number
          format: double
          x-type: double
        threeWardsOneSweeperCount:
          type: number
          format: double
          x-type: double
        tookLargeDamageSurvived:
          type: number
          format: double
          x-type: double
        turretPlatesTaken:
          type: number
          format: double
          x-type: double
        turretsTakenWithRiftHerald:
          type: number
          format: double
          x-type: double
        turretTakedowns:
          type: number
          format: double
          x-type: double
        twentyMinionsIn3SecondsCount:
          type: number
          format: double
          x-type: double
        twoWardsOneSweeperCount:
          type: integer
          format: int32
          x-type: int
        unseenRecalls:
          type: number
          format: double
          x-type: double
        visionScoreAdvantageLaneOpponent:
          type: number
          format: double
          x-type: double
        visionScorePerMinute:
          type: number
          format: double
          x-type: double
        wardsGuarded:
          type: number
          format: double
          x-type: double
        wardTakedowns:
          type: number
          format: double
          x-type: double
        wardTakedownsBefore20M:
          type: number
          format: double
          x-type: double
    match-v5.ParticipantMissions:
      type: object
      title: ParticipantMissions
      properties:
        playerScore0:
          type: integer
          format: int32
          x-type: int
        playerScore1:
          type: integer
          format: int32
          x-type: int
        playerScore10:
          type: integer
          format: int32
          x-type: int
        playerScore11:
          type: integer
          format: int32
          x-type: int
        playerScore2:
          type: integer
          format: int32
          x-type: int
        playerScore3:
          type: integer
          format: int32
          x-type: int
        playerScore4:
          type: integer
          format: int32
          x-type: int
        playerScore5:
          type: integer
          format: int32
          x-type: int
        playerScore6:
          type: integer
          format: int32
          x-type: int
        playerScore7:
          type: integer
          format: int32
          x-type: int
        playerScore8:
          type: integer
          format: int32
          x-type: int
        playerScore9:
          type: integer
          format: int32
          x-type: int
      required:
        - playerScore0
        - playerScore1
        - playerScore10
        - playerScore11
        - playerScore2
        - playerScore3
        - playerScore4
        - playerScore5
        - playerScore6
        - playerScore7
        - playerScore8
        - playerScore9
    match-v5.MatchTimelineInfoFrameEvent:
      title: MatchTimelineInfoFrameEvent
      type: object
      properties:
        realTimestamp:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - ASCENDED_EVENT
            - BUILDING_KILL
            - CAPTURE_POINT
            - CHAMPION_KILL
            - CHAMPION_SPECIAL_KILL
            - CHAMPION_TRANSFORM
            - DRAGON_SOUL_GIVEN
            - ELITE_MONSTER_KILL
            - GAME_END
            - ITEM_DESTROYED
            - ITEM_PURCHASED
            - ITEM_SOLD
            - ITEM_UNDO
            - LEVEL_UP
            - PAUSE_END
            - PAUSE_START
            - SKILL_LEVEL_UP
            - TURRET_PLATE_DESTROYED
            - WARD_KILL
            - WARD_PLACED
          description: "Timeline event type.\n(Known legal values: ASCENDED_EVENT, BUILDING_KILL, CAPTURE_POINT, CHAMPION_KILL, CHAMPION_SPECIAL_KILL, CHAMPION_TRANSFORM, DRAGON_SOUL_GIVEN, ELITE_MONSTER_KILL, GAME_END, ITEM_DESTROYED, ITEM_PURCHASED, ITEM_SOLD, ITEM_UNDO, LEVEL_UP, PAUSE_END, PAUSE_START, SKILL_LEVEL_UP, TURRET_PLATE_DESTROYED, WARD_KILL, WARD_PLACED)"
        itemId:
          type: integer
          format: int32
        participantId:
          type: integer
          format: int32
        levelUpType:
          type: string
        skillSlot:
          type: integer
          format: int32
        creatorId:
          type: integer
          format: int32
        wardType:
          type: string
        level:
          type: integer
          format: int32
        assistingParticipantIds:
          type: array
          items:
            type: integer
            format: int32
        bounty:
          type: integer
          format: int32
        killStreakLength:
          type: integer
          format: int32
        killerId:
          type: integer
          format: int32
        position:
          $ref: "#/components/schemas/match-v5.MatchTimelinePosition"
        victimDamageDealt:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameEventVictimDamageDealt"
        victimDamageReceived:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameEventVictimDamageDealt"
        victimId:
          type: integer
          format: int32
        killType:
          type: string
        laneType:
          type: string
        teamId:
          type: integer
          format: int32
          x-enum: team
        multiKillLength:
          type: integer
          format: int32
        killerTeamId:
          type: integer
          format: int32
          x-enum: team
        monsterType:
          type: string
        monsterSubType:
          type: string
        buildingType:
          type: string
        towerType:
          type: string
        afterId:
          type: integer
          format: int32
        beforeId:
          type: integer
          format: int32
        goldGain:
          type: integer
          format: int32
        gameId:
          type: integer
          format: int64
        winningTeam:
          type: integer
          format: int32
        transformType:
          type: string
        name:
          type: string
        shutdownBounty:
          type: integer
          format: int32
        actualStartTime:
          type: integer
          format: int64
      required:
        - timestamp
        - type
    match-v5.MatchTimelineInfoFrameParticipantFrameChampionStats:
      title: MatchTimelineInfoFrameParticipantFrameChampionStats
      type: object
      properties:
        abilityHaste:
          type: integer
          format: int32
        abilityPower:
          type: integer
          format: int32
        armor:
          type: integer
          format: int32
        armorPen:
          type: integer
          format: int32
        armorPenPercent:
          type: integer
          format: int32
        attackDamage:
          type: integer
          format: int32
        attackSpeed:
          type: integer
          format: int32
        bonusArmorPenPercent:
          type: integer
          format: int32
        bonusMagicPenPercent:
          type: integer
          format: int32
        ccReduction:
          type: integer
          format: int32
        cooldownReduction:
          type: integer
          format: int32
        health:
          type: integer
          format: int32
        healthMax:
          type: integer
          format: int32
        healthRegen:
          type: integer
          format: int32
        lifesteal:
          type: integer
          format: int32
        magicPen:
          type: integer
          format: int32
        magicPenPercent:
          type: integer
          format: int32
        magicResist:
          type: integer
          format: int32
        movementSpeed:
          type: integer
          format: int32
        omnivamp:
          type: integer
          format: int32
        physicalVamp:
          type: integer
          format: int32
        power:
          type: integer
          format: int32
        powerMax:
          type: integer
          format: int32
        powerRegen:
          type: integer
          format: int32
        spellVamp:
          type: integer
          format: int32
      required:
        - abilityPower
        - armor
        - armorPen
        - armorPenPercent
        - attackDamage
        - attackSpeed
        - bonusArmorPenPercent
        - bonusMagicPenPercent
        - ccReduction
        - cooldownReduction
        - health
        - healthMax
        - healthRegen
        - lifesteal
        - magicPen
        - magicPenPercent
        - magicResist
        - movementSpeed
        - power
        - powerMax
        - powerRegen
        - spellVamp
    match-v5.MatchTimelineInfoFrameParticipantFrameDamageStats:
      title: MatchTimelineInfoFrameParticipantFrameDamageStats
      type: object
      properties:
        magicDamageDone:
          type: integer
          format: int32
        magicDamageDoneToChampions:
          type: integer
          format: int32
        magicDamageTaken:
          type: integer
          format: int32
        physicalDamageDone:
          type: integer
          format: int32
        physicalDamageDoneToChampions:
          type: integer
          format: int32
        physicalDamageTaken:
          type: integer
          format: int32
        totalDamageDone:
          type: integer
          format: int32
        totalDamageDoneToChampions:
          type: integer
          format: int32
        totalDamageTaken:
          type: integer
          format: int32
        trueDamageDone:
          type: integer
          format: int32
        trueDamageDoneToChampions:
          type: integer
          format: int32
        trueDamageTaken:
          type: integer
          format: int32
      required:
        - magicDamageDone
        - magicDamageDoneToChampions
        - magicDamageTaken
        - physicalDamageDone
        - physicalDamageDoneToChampions
        - physicalDamageTaken
        - totalDamageDone
        - totalDamageDoneToChampions
        - totalDamageTaken
        - trueDamageDone
        - trueDamageDoneToChampions
        - trueDamageTaken
    match-v5.MatchTimelinePosition:
      title: MatchTimelinePosition
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
      required:
        - x
        - y
    match-v5.MatchTimelineInfoFrameParticipantFrame:
      title: MatchTimelineInfoFrameParticipantFrame
      type: object
      properties:
        championStats:
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrameChampionStats"
        currentGold:
          type: integer
          format: int32
        damageStats:
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrameDamageStats"
        goldPerSecond:
          type: integer
          format: int32
        jungleMinionsKilled:
          type: integer
          format: int32
        level:
          type: integer
          format: int32
        minionsKilled:
          type: integer
          format: int32
        participantId:
          type: integer
          format: int32
        position:
          $ref: "#/components/schemas/match-v5.MatchTimelinePosition"
        timeEnemySpentControlled:
          type: integer
          format: int32
        totalGold:
          type: integer
          format: int32
        xp:
          type: integer
          format: int32
      required:
        - championStats
        - currentGold
        - damageStats
        - goldPerSecond
        - jungleMinionsKilled
        - level
        - minionsKilled
        - participantId
        - position
        - timeEnemySpentControlled
        - totalGold
        - xp
    match-v5.MatchTimelineInfoFrameParticipantFrames:
      title: MatchTimelineInfoFrameParticipantFrames
      type: object
      properties:
        "1":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "2":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "3":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "4":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "5":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "6":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "7":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "8":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
        "9":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
          description: "Possibly null for the Arena 2v2v2v2 (`CHERRY`) game mode."
        "10":
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrame"
          description: "Possibly null for the Arena 2v2v2v2 (`CHERRY`) game mode."
      required:
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
        - "8"
    match-v5.MatchTimelineInfoFrame:
      title: MatchTimelineInfoFrame
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameEvent"
        participantFrames:
          $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrameParticipantFrames"
        timestamp:
          type: integer
          format: int32
      required:
        - events
        - participantFrames
        - timestamp
    match-v5.MatchTimelineInfoFrameEventVictimDamageDealt:
      title: MatchTimelineInfoFrameEventVictimDamageReceived
      type: object
      properties:
        basic:
          type: boolean
        magicDamage:
          type: integer
          format: int32
        name:
          type: string
        participantId:
          type: integer
          format: int32
        physicalDamage:
          type: integer
          format: int32
        spellName:
          type: string
        spellSlot:
          type: integer
          format: int32
        trueDamage:
          type: integer
          format: int32
        type:
          type: string
      required:
        - basic
        - magicDamage
        - name
        - participantId
        - physicalDamage
        - spellName
        - spellSlot
        - trueDamage
        - type
    match-v5.MatchTimelineInfoParticipant:
      title: MatchTimelineInfoParticipant
      type: object
      properties:
        participantId:
          type: integer
          format: int32
        puuid:
          type: string
      required:
        - participantId
        - puuid
    match-v5.MatchTimelineInfo:
      title: MatchTimelineInfo
      type: object
      properties:
        frameInterval:
          type: integer
          format: int32
        frames:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.MatchTimelineInfoFrame"
        gameId:
          type: integer
          format: int64
        participants:
          type: array
          items:
            $ref: "#/components/schemas/match-v5.MatchTimelineInfoParticipant"
      required:
        - frameInterval
        - frames
  securitySchemes:
    api_key:
      type: apiKey
      description: "API key in query param."
      name: api_key
      in: query
    X-Riot-Token:
      type: apiKey
      description: "API key in header."
      name: X-Riot-Token
      in: header
security:
  - api_key: []
  - X-Riot-Token: []
